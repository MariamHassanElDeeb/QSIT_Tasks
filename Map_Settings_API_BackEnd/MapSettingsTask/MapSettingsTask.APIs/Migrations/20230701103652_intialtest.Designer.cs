// <auto-generated />
using MapConfig.APIs.Data;
using MapSettingsTask.APIs.Data.Ccontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapConfig.APIs.Migrations
{
    [DbContext(typeof(MapContext))]
    [Migration("20230701103652_intialtest")]
    partial class intialtest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MapConfig.APIs.Data.MapSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ClusterRedius")
                        .HasColumnType("decimal(5,3)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsGeofenced")
                        .HasColumnType("bit");

                    b.Property<decimal>("LocationBuffer")
                        .HasColumnType("decimal(5,3)");

                    b.Property<int>("MapSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MapTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TimeBuffer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MapConfig.APIs.Data.MapSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MapTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapTypeId");

                    b.ToTable("MapSubType");
                });

            modelBuilder.Entity("MapConfig.APIs.Data.MapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MapTypes");
                });

            modelBuilder.Entity("MapConfig.APIs.Data.MapSubType", b =>
                {
                    b.HasOne("MapConfig.APIs.Data.MapType", "MapType")
                        .WithMany("SubTypes")
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapType");
                });

            modelBuilder.Entity("MapConfig.APIs.Data.MapType", b =>
                {
                    b.Navigation("SubTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
